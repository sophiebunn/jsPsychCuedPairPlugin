var jsPsychCuedPairHtml = (function (jspsych) {
    "use strict";

    const info = {
        name: "cued-html",
        parameters: {
            /** HTML formatted string containing all the input elements to display. Every element has to have its own distinctive name attribute. The <form> tag must not be included and is generated by the plugin. */
            Cue: {
                type: jspsych.ParameterType.HTML_STRING,
                pretty_name: "Cue",
                default: null,
            },
            Target: {
                type: jspsych.ParameterType.HTML_STRING,
                pretty_name: "Target",
                default: null,
            },
            Condition: {
                type: jspsych.ParameterType.INT,
                pretty_name: "Condition",
                default: 0,
            },
            /** The text that appears on the button to finish the trial. */
            Trial_Duration: {
                type: jspsych.ParameterType.INT,
                pretty_name: "Trial Duration",
                default: 10000,
            },
            /** Retrieve the data as an array e.g. [{name: "INPUT_NAME", value: "INPUT_VALUE"}, ...] instead of an object e.g. {INPUT_NAME: INPUT_VALUE, ...}. */
            dataAsArray: {
                type: jspsych.ParameterType.BOOL,
                pretty_name: "Data As Array",
                default: false,
            },
        },
    };

    class jsPsychCuedPairHtmlPlugin {

        constructor(jsPsych) { 
            this.jsPsych = jsPsych;
        }

        trial(display_element, trial) {
        var html = "";
        var timer_interval;
            // start form
            html += '<form id="jspsych-survey-html-form" autocomplete="off">';

            if (trial.Condition !== 1) {
                html += `<p style="font-size: 70px; font-family: monospace;">${trial.Cue}    -    <u>${trial.Target}</u></p>`;
            }
            else {
                html += `<p style="font-size: 70px; font-family: monospace;">${trial.Cue}    -     <u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></p>`;
            }

            html += '<p> <input name="Participant Response" type="text" /></p><br><br>';
            html += "</form>";
            html += `<span id="cued-timer" style="font-size: 50px;"></span>`;

            display_element.innerHTML = html;

            startCountdown();

            display_element.querySelector("#jspsych-cued-html")

            function serializeArray(form) {
                var serialized = [];

                    // Loop through each field in the form
                    for (var i = 0; i < form.elements.length; i++) {
                        var field = form.elements[i];
                        serialized.push({
                            name: field.name,
                            value: field.value,
                        });
                    }
                return serialized;
            }
            function objectifyForm(formArray) {
                    //serialize data function
                var returnArray = {};
                    for (var i = 0; i < formArray.length; i++) {
                        returnArray[formArray[i]["name"]] = formArray[i]["value"];
                    }
                return returnArray;
            }

            function startCountdown() {
                timer_interval = setInterval(() => {
                    const remaining = trial.Trial_Duration - (performance.now() - start_time);
                    let minutes = Math.floor(remaining / 1000 / 60);
                    let seconds = Math.ceil((remaining - minutes * 1000 * 60) / 1000);
                    if (seconds == 60) {
                        seconds = 0;
                        minutes++;
                    }
                    const minutes_str = minutes.toString();
                    const seconds_str = seconds.toString().padStart(2, "0");
                    display_element.querySelector("#cued-timer").textContent = `${minutes_str}:${seconds_str}`;
                    
                    if (remaining <= 0) {
                        display_element.querySelector("#cued-timer").textContent = `${minutes_str}:${seconds_str}`;
                        clearInterval(timer_interval);
                    }
                }, 250);
            }

            if (trial.Trial_Duration !== null) {
                this.jsPsych.pluginAPI.setTimeout(() => {

                    var this_form = display_element.querySelector("#jspsych-survey-html-form");
                    var question_data = serializeArray(this_form);

                    question_data = objectifyForm(question_data);


                    if (trial.Condition == 0) {
                        var display = trial.Cue + "-" + trial.Target;
                        var study = "Restudy";
                    }
                    else {
                        var display = trial.Cue;
                        var study = "Retrieval";
                    }
                    var trialdata = {
                        displayed: display,
                        study_type: study,
                        response: question_data,
                    };

                    display_element.innerHTML = "";
                    // next trial
                    jsPsych.finishTrial(trialdata);
                }, trial.Trial_Duration);
            }

            var start_time = performance.now();
        }
    }
    jsPsychCuedPairHtmlPlugin.info = info;
    return jsPsychCuedPairHtmlPlugin;

})(jsPsychModule);